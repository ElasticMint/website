{"id":460,"date":"2021-06-29T10:18:38","date_gmt":"2021-06-29T09:18:38","guid":{"rendered":"https:\/\/www.elasticmint.com\/?p=460"},"modified":"2024-11-25T07:24:12","modified_gmt":"2024-11-25T07:24:12","slug":"the-dangers-of-trying-to-future-proof-code","status":"publish","type":"post","link":"https:\/\/www.elasticmint.com\/the-dangers-of-trying-to-future-proof-code\/","title":{"rendered":"The Dangers Of Trying To Future-Proof Code"},"content":{"rendered":"<h2><span data-preserver-spaces=\"true\">Reuse For The Sake Of It<\/span><\/h2>\n<p><span data-preserver-spaces=\"true\">One of the first lessons we learn as software developers is about code reuse. Every book, every piece of documentation, every blog breaks down code into small reusable chunks i.e. classes and methods. The reasoning behind the choices made are rarely discussed because there is an implicit assumption that everyone understands it. Writing the same code multiple times is considered bad, and so we organise it in such a way as to allow us to use it wherever we want. Even though we rarely plan to reuse the code at the time of writing, we have this thought that someone might want to in the future.<\/span><\/p>\n<p><span data-preserver-spaces=\"true\">On the surface this seems like a really good thing. We want to make it easy for our future selves to make changes. The problem is that as a species humans are not good at predicting the future. We abstract code out into classes in an attempt to future-proof it, but the imagined future rarely happens. As a result we find ourselves working in code with hundreds of service\/utility\/helper classes containing single-use pieces of functionality and code that is usually nowhere near as easy to understand or change as we first thought.<\/span><\/p>\n<h2><span data-preserver-spaces=\"true\">Rethinking Abstraction<\/span><\/h2>\n<p><span data-preserver-spaces=\"true\">So what can we do about this? I would suggest that we need to rethink the way we approach writing code, based on the following principles:<\/span><\/p>\n<ul>\n<li><span data-preserver-spaces=\"true\">Organise code by features<\/span><\/li>\n<li><span data-preserver-spaces=\"true\">Write tests alongside our code<\/span><\/li>\n<li><span data-preserver-spaces=\"true\">Don&#8217;t abstract until we need to<\/span><\/li>\n<li><span data-preserver-spaces=\"true\">Refactor to patterns only when they become apparent<\/span><\/li>\n<\/ul>\n<p><span data-preserver-spaces=\"true\">As developers we have been conditioned to organised code according to its place in the architecture. The project templates in Visual Studio come with folders named with things like Views, Models, Controllers. Developers tend to follow this pattern, adding other folders named Services, Repositories or Utils. Consider what this means for a typical piece of functionality in an API e<\/span><strong><span data-preserver-spaces=\"true\">.g. an endpoint to add or update a customer record.<\/span><\/strong><\/p>\n<h2><span data-preserver-spaces=\"true\">A Common Approach To Organising Code<\/span><\/h2>\n<p><span data-preserver-spaces=\"true\">In the .Net world, the common approach would be to add the endpoint to a class called\u00a0<\/span><em><span data-preserver-spaces=\"true\">CustomerController<\/span><\/em><span data-preserver-spaces=\"true\">. This class may call a method in the\u00a0<\/span><em><span data-preserver-spaces=\"true\">CustomerService<\/span><\/em><span data-preserver-spaces=\"true\">\u00a0class which will then call the\u00a0<\/span><em><span data-preserver-spaces=\"true\">CustomerRepository<\/span><\/em><span data-preserver-spaces=\"true\">\u00a0to write the data to a database. Along the way it may use a\u00a0<\/span><em><span data-preserver-spaces=\"true\">CustomerValidator<\/span><\/em><span data-preserver-spaces=\"true\">\u00a0and a\u00a0<\/span><em><span data-preserver-spaces=\"true\">CustomerMapper<\/span><\/em><span data-preserver-spaces=\"true\">, or even a\u00a0<\/span><em><span data-preserver-spaces=\"true\">CustomerHelper<\/span><\/em><span data-preserver-spaces=\"true\">.<\/span><\/p>\n<p><span data-preserver-spaces=\"true\">Each of these classes will be in different folders and the developer will need to hunt through the codebase to find them. Most of the methods will be\u00a0<\/span><strong><span data-preserver-spaces=\"true\">used in exactly one place<\/span><\/strong><span data-preserver-spaces=\"true\">, although of course they will be reusable, because someone might want to use them in the future.<\/span><\/p>\n<p><span data-preserver-spaces=\"true\">Notice how all these classes are named Customer<\/span><em><span data-preserver-spaces=\"true\">Something<\/span><\/em><span data-preserver-spaces=\"true\">. This is to help developers find them amongst all the other classes.<\/span><\/p>\n<p><span data-preserver-spaces=\"true\">Also while it might be clear what a\u00a0<\/span><em><span data-preserver-spaces=\"true\">CustomerValidator<\/span><\/em><span data-preserver-spaces=\"true\">\u00a0or\u00a0<\/span><em><span data-preserver-spaces=\"true\">CustomerMapper<\/span><\/em><span data-preserver-spaces=\"true\">\u00a0does, what does a\u00a0<\/span><em><span data-preserver-spaces=\"true\">CustomerService<\/span><\/em><span data-preserver-spaces=\"true\">\u00a0do? Or a\u00a0<\/span><em><span data-preserver-spaces=\"true\">CustomerHelper<\/span><\/em><span data-preserver-spaces=\"true\">?<\/span><\/p>\n<p><span data-preserver-spaces=\"true\">This way of organising code is partly a result of the desire to future-proof and make code reusable.<\/span><\/p>\n<h2><span data-preserver-spaces=\"true\">Organising By Feature<\/span><\/h2>\n<p><span data-preserver-spaces=\"true\">An alternative would be to have a folder called\u00a0<\/span><em><span data-preserver-spaces=\"true\">Customers<\/span><\/em><span data-preserver-spaces=\"true\"> which contains all the functionality related to customers. This where the controller could be, or if using a library like\u00a0<\/span><a class=\"editor-rtfLink\" href=\"https:\/\/github.com\/ardalis\/ApiEndpoints\" target=\"_blank\" rel=\"noopener\"><span data-preserver-spaces=\"true\">Ardalis ApiEndpoints<\/span><\/a><span data-preserver-spaces=\"true\">\u00a0there might be a class for each endpoint. A good way to start would be to put all the code to process the request into a single method.<\/span><\/p>\n<p><span data-preserver-spaces=\"true\">In the .Net world at least, I&#8217;ve observed that very few developers practice Test Driven Development &#8211; although everyone agrees on the importance of tests.<\/span><\/p>\n<p><span data-preserver-spaces=\"true\">If there aren&#8217;t any tests already, this would be the time to write the first one. Or even several! These tests should cover the full functionality of the endpoint.<\/span><\/p>\n<p><span data-preserver-spaces=\"true\">Having written some tests it may make sense to abstract some of it out into other well-named methods for readability.<\/span><\/p>\n<p><span data-preserver-spaces=\"true\">Having followed this approach all the code related to adding or updating a customer would be in one place which is easy to find. There wouldn&#8217;t be classes vaguely related to customers scattered over the codebase.<\/span><\/p>\n<p><span data-preserver-spaces=\"true\">As we continue developing some of this code may turn out to be reusable and then it can be abstracted into classes. The tests will enable refactoring to be done safely because they cover the whole endpoint.<\/span><\/p>\n<h2><span data-preserver-spaces=\"true\">The Path to Success<\/span><\/h2>\n<p><span data-preserver-spaces=\"true\">Another word for future-proofing is guessing.\u00a0<\/span><strong><span data-preserver-spaces=\"true\">When we do this we often get it wrong.<\/span><\/strong><span data-preserver-spaces=\"true\"> We write more code than is needed and abstract ideas prematurely. Code becomes harder to reason about and harder to change. Some people might call this over-engineering. Ultimately this leads to bugs and longer cycle times.<\/span><\/p>\n<p>As a reminder here is how I would define the path to success:<\/p>\n<ul>\n<li><span data-preserver-spaces=\"true\">Organise code by features<\/span><\/li>\n<li><span data-preserver-spaces=\"true\">Write tests alongside our code<\/span><\/li>\n<li><span data-preserver-spaces=\"true\">Don&#8217;t abstract until we need to<\/span><\/li>\n<li><span data-preserver-spaces=\"true\">Refactor to patterns only when they become apparent<\/span><\/li>\n<\/ul>\n","protected":false},"excerpt":{"rendered":"<p>Reuse For The Sake Of It One of the first lessons we learn as software developers is about code reuse. Every book, every piece of documentation, every blog breaks down code into small reusable chunks i.e. classes and methods. The &hellip; <a href=\"https:\/\/www.elasticmint.com\/the-dangers-of-trying-to-future-proof-code\/\">Continue reading <span class=\"meta-nav\">&rarr;<\/span><\/a><\/p>\n","protected":false},"author":6,"featured_media":482,"comment_status":"closed","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"_acf_changed":false,"footnotes":""},"categories":[1],"tags":[],"class_list":["post-460","post","type-post","status-publish","format-standard","has-post-thumbnail","hentry","category-uncategorized"],"acf":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v25.4 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>The Dangers Of Trying To Future-Proof Code - Elastic Mint<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.elasticmint.com\/the-dangers-of-trying-to-future-proof-code\/\" \/>\n<meta property=\"og:locale\" content=\"en_GB\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"The Dangers Of Trying To Future-Proof Code - Elastic Mint\" \/>\n<meta property=\"og:description\" content=\"Reuse For The Sake Of It One of the first lessons we learn as software developers is about code reuse. Every book, every piece of documentation, every blog breaks down code into small reusable chunks i.e. classes and methods. The &hellip; Continue reading &rarr;\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.elasticmint.com\/the-dangers-of-trying-to-future-proof-code\/\" \/>\n<meta property=\"og:site_name\" content=\"Elastic Mint\" \/>\n<meta property=\"article:published_time\" content=\"2021-06-29T09:18:38+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2024-11-25T07:24:12+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/www.elasticmint.com\/wp-content\/uploads\/2021\/06\/Hammer-and-Nut-scaled.jpg\" \/>\n\t<meta property=\"og:image:width\" content=\"2560\" \/>\n\t<meta property=\"og:image:height\" content=\"1283\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/jpeg\" \/>\n<meta name=\"author\" content=\"Andy\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@elasticmint\" \/>\n<meta name=\"twitter:site\" content=\"@elasticmint\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Andy\" \/>\n\t<meta name=\"twitter:label2\" content=\"Estimated reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"4 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Article\",\"@id\":\"https:\/\/www.elasticmint.com\/the-dangers-of-trying-to-future-proof-code\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/www.elasticmint.com\/the-dangers-of-trying-to-future-proof-code\/\"},\"author\":{\"name\":\"Andy\",\"@id\":\"https:\/\/www.elasticmint.com\/#\/schema\/person\/526698f5827a951afc3220bf4d37d08e\"},\"headline\":\"The Dangers Of Trying To Future-Proof Code\",\"datePublished\":\"2021-06-29T09:18:38+00:00\",\"dateModified\":\"2024-11-25T07:24:12+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/www.elasticmint.com\/the-dangers-of-trying-to-future-proof-code\/\"},\"wordCount\":807,\"publisher\":{\"@id\":\"https:\/\/www.elasticmint.com\/#organization\"},\"image\":{\"@id\":\"https:\/\/www.elasticmint.com\/the-dangers-of-trying-to-future-proof-code\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/www.elasticmint.com\/wp-content\/uploads\/2021\/06\/Hammer-and-Nut-scaled.jpg\",\"articleSection\":[\"Uncategorized\"],\"inLanguage\":\"en-GB\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.elasticmint.com\/the-dangers-of-trying-to-future-proof-code\/\",\"url\":\"https:\/\/www.elasticmint.com\/the-dangers-of-trying-to-future-proof-code\/\",\"name\":\"The Dangers Of Trying To Future-Proof Code - Elastic Mint\",\"isPartOf\":{\"@id\":\"https:\/\/www.elasticmint.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.elasticmint.com\/the-dangers-of-trying-to-future-proof-code\/#primaryimage\"},\"image\":{\"@id\":\"https:\/\/www.elasticmint.com\/the-dangers-of-trying-to-future-proof-code\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/www.elasticmint.com\/wp-content\/uploads\/2021\/06\/Hammer-and-Nut-scaled.jpg\",\"datePublished\":\"2021-06-29T09:18:38+00:00\",\"dateModified\":\"2024-11-25T07:24:12+00:00\",\"breadcrumb\":{\"@id\":\"https:\/\/www.elasticmint.com\/the-dangers-of-trying-to-future-proof-code\/#breadcrumb\"},\"inLanguage\":\"en-GB\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.elasticmint.com\/the-dangers-of-trying-to-future-proof-code\/\"]}]},{\"@type\":\"ImageObject\",\"inLanguage\":\"en-GB\",\"@id\":\"https:\/\/www.elasticmint.com\/the-dangers-of-trying-to-future-proof-code\/#primaryimage\",\"url\":\"https:\/\/www.elasticmint.com\/wp-content\/uploads\/2021\/06\/Hammer-and-Nut-scaled.jpg\",\"contentUrl\":\"https:\/\/www.elasticmint.com\/wp-content\/uploads\/2021\/06\/Hammer-and-Nut-scaled.jpg\",\"width\":2560,\"height\":1283},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/www.elasticmint.com\/the-dangers-of-trying-to-future-proof-code\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/www.elasticmint.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"The Dangers Of Trying To Future-Proof Code\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.elasticmint.com\/#website\",\"url\":\"https:\/\/www.elasticmint.com\/\",\"name\":\"Elastic Mint Bespoke Software Development company in Bristol offering Software Development and IT Consultancy\",\"description\":\"A refreshing approach to bespoke software development\",\"publisher\":{\"@id\":\"https:\/\/www.elasticmint.com\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/www.elasticmint.com\/?s={search_term_string}\"},\"query-input\":{\"@type\":\"PropertyValueSpecification\",\"valueRequired\":true,\"valueName\":\"search_term_string\"}}],\"inLanguage\":\"en-GB\"},{\"@type\":\"Organization\",\"@id\":\"https:\/\/www.elasticmint.com\/#organization\",\"name\":\"Elastic Mint Bespoke Software Development company in Bristol offering Software Development and IT Consultancy\",\"url\":\"https:\/\/www.elasticmint.com\/\",\"logo\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-GB\",\"@id\":\"https:\/\/www.elasticmint.com\/#\/schema\/logo\/image\/\",\"url\":\"https:\/\/www.elasticmint.com\/wp-content\/uploads\/2023\/02\/LOGO_mint-back.jpg\",\"contentUrl\":\"https:\/\/www.elasticmint.com\/wp-content\/uploads\/2023\/02\/LOGO_mint-back.jpg\",\"width\":1500,\"height\":1060,\"caption\":\"Elastic Mint Bespoke Software Development company in Bristol offering Software Development and IT Consultancy\"},\"image\":{\"@id\":\"https:\/\/www.elasticmint.com\/#\/schema\/logo\/image\/\"},\"sameAs\":[\"https:\/\/x.com\/elasticmint\",\"https:\/\/www.linkedin.com\/company\/elastic-mint-ltd\/\"]},{\"@type\":\"Person\",\"@id\":\"https:\/\/www.elasticmint.com\/#\/schema\/person\/526698f5827a951afc3220bf4d37d08e\",\"name\":\"Andy\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-GB\",\"@id\":\"https:\/\/www.elasticmint.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/6362b9f5d9db9f5240bd5b9df62c892634f001fb7477495c6a0b6638be496c9f?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/6362b9f5d9db9f5240bd5b9df62c892634f001fb7477495c6a0b6638be496c9f?s=96&d=mm&r=g\",\"caption\":\"Andy\"},\"url\":\"https:\/\/www.elasticmint.com\/author\/andy\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"The Dangers Of Trying To Future-Proof Code - Elastic Mint","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/www.elasticmint.com\/the-dangers-of-trying-to-future-proof-code\/","og_locale":"en_GB","og_type":"article","og_title":"The Dangers Of Trying To Future-Proof Code - Elastic Mint","og_description":"Reuse For The Sake Of It One of the first lessons we learn as software developers is about code reuse. Every book, every piece of documentation, every blog breaks down code into small reusable chunks i.e. classes and methods. The &hellip; Continue reading &rarr;","og_url":"https:\/\/www.elasticmint.com\/the-dangers-of-trying-to-future-proof-code\/","og_site_name":"Elastic Mint","article_published_time":"2021-06-29T09:18:38+00:00","article_modified_time":"2024-11-25T07:24:12+00:00","og_image":[{"width":2560,"height":1283,"url":"https:\/\/www.elasticmint.com\/wp-content\/uploads\/2021\/06\/Hammer-and-Nut-scaled.jpg","type":"image\/jpeg"}],"author":"Andy","twitter_card":"summary_large_image","twitter_creator":"@elasticmint","twitter_site":"@elasticmint","twitter_misc":{"Written by":"Andy","Estimated reading time":"4 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"Article","@id":"https:\/\/www.elasticmint.com\/the-dangers-of-trying-to-future-proof-code\/#article","isPartOf":{"@id":"https:\/\/www.elasticmint.com\/the-dangers-of-trying-to-future-proof-code\/"},"author":{"name":"Andy","@id":"https:\/\/www.elasticmint.com\/#\/schema\/person\/526698f5827a951afc3220bf4d37d08e"},"headline":"The Dangers Of Trying To Future-Proof Code","datePublished":"2021-06-29T09:18:38+00:00","dateModified":"2024-11-25T07:24:12+00:00","mainEntityOfPage":{"@id":"https:\/\/www.elasticmint.com\/the-dangers-of-trying-to-future-proof-code\/"},"wordCount":807,"publisher":{"@id":"https:\/\/www.elasticmint.com\/#organization"},"image":{"@id":"https:\/\/www.elasticmint.com\/the-dangers-of-trying-to-future-proof-code\/#primaryimage"},"thumbnailUrl":"https:\/\/www.elasticmint.com\/wp-content\/uploads\/2021\/06\/Hammer-and-Nut-scaled.jpg","articleSection":["Uncategorized"],"inLanguage":"en-GB"},{"@type":"WebPage","@id":"https:\/\/www.elasticmint.com\/the-dangers-of-trying-to-future-proof-code\/","url":"https:\/\/www.elasticmint.com\/the-dangers-of-trying-to-future-proof-code\/","name":"The Dangers Of Trying To Future-Proof Code - Elastic Mint","isPartOf":{"@id":"https:\/\/www.elasticmint.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/www.elasticmint.com\/the-dangers-of-trying-to-future-proof-code\/#primaryimage"},"image":{"@id":"https:\/\/www.elasticmint.com\/the-dangers-of-trying-to-future-proof-code\/#primaryimage"},"thumbnailUrl":"https:\/\/www.elasticmint.com\/wp-content\/uploads\/2021\/06\/Hammer-and-Nut-scaled.jpg","datePublished":"2021-06-29T09:18:38+00:00","dateModified":"2024-11-25T07:24:12+00:00","breadcrumb":{"@id":"https:\/\/www.elasticmint.com\/the-dangers-of-trying-to-future-proof-code\/#breadcrumb"},"inLanguage":"en-GB","potentialAction":[{"@type":"ReadAction","target":["https:\/\/www.elasticmint.com\/the-dangers-of-trying-to-future-proof-code\/"]}]},{"@type":"ImageObject","inLanguage":"en-GB","@id":"https:\/\/www.elasticmint.com\/the-dangers-of-trying-to-future-proof-code\/#primaryimage","url":"https:\/\/www.elasticmint.com\/wp-content\/uploads\/2021\/06\/Hammer-and-Nut-scaled.jpg","contentUrl":"https:\/\/www.elasticmint.com\/wp-content\/uploads\/2021\/06\/Hammer-and-Nut-scaled.jpg","width":2560,"height":1283},{"@type":"BreadcrumbList","@id":"https:\/\/www.elasticmint.com\/the-dangers-of-trying-to-future-proof-code\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/www.elasticmint.com\/"},{"@type":"ListItem","position":2,"name":"The Dangers Of Trying To Future-Proof Code"}]},{"@type":"WebSite","@id":"https:\/\/www.elasticmint.com\/#website","url":"https:\/\/www.elasticmint.com\/","name":"Elastic Mint Bespoke Software Development company in Bristol offering Software Development and IT Consultancy","description":"A refreshing approach to bespoke software development","publisher":{"@id":"https:\/\/www.elasticmint.com\/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/www.elasticmint.com\/?s={search_term_string}"},"query-input":{"@type":"PropertyValueSpecification","valueRequired":true,"valueName":"search_term_string"}}],"inLanguage":"en-GB"},{"@type":"Organization","@id":"https:\/\/www.elasticmint.com\/#organization","name":"Elastic Mint Bespoke Software Development company in Bristol offering Software Development and IT Consultancy","url":"https:\/\/www.elasticmint.com\/","logo":{"@type":"ImageObject","inLanguage":"en-GB","@id":"https:\/\/www.elasticmint.com\/#\/schema\/logo\/image\/","url":"https:\/\/www.elasticmint.com\/wp-content\/uploads\/2023\/02\/LOGO_mint-back.jpg","contentUrl":"https:\/\/www.elasticmint.com\/wp-content\/uploads\/2023\/02\/LOGO_mint-back.jpg","width":1500,"height":1060,"caption":"Elastic Mint Bespoke Software Development company in Bristol offering Software Development and IT Consultancy"},"image":{"@id":"https:\/\/www.elasticmint.com\/#\/schema\/logo\/image\/"},"sameAs":["https:\/\/x.com\/elasticmint","https:\/\/www.linkedin.com\/company\/elastic-mint-ltd\/"]},{"@type":"Person","@id":"https:\/\/www.elasticmint.com\/#\/schema\/person\/526698f5827a951afc3220bf4d37d08e","name":"Andy","image":{"@type":"ImageObject","inLanguage":"en-GB","@id":"https:\/\/www.elasticmint.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/6362b9f5d9db9f5240bd5b9df62c892634f001fb7477495c6a0b6638be496c9f?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/6362b9f5d9db9f5240bd5b9df62c892634f001fb7477495c6a0b6638be496c9f?s=96&d=mm&r=g","caption":"Andy"},"url":"https:\/\/www.elasticmint.com\/author\/andy\/"}]}},"_links":{"self":[{"href":"https:\/\/www.elasticmint.com\/wp-json\/wp\/v2\/posts\/460","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/www.elasticmint.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.elasticmint.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.elasticmint.com\/wp-json\/wp\/v2\/users\/6"}],"replies":[{"embeddable":true,"href":"https:\/\/www.elasticmint.com\/wp-json\/wp\/v2\/comments?post=460"}],"version-history":[{"count":0,"href":"https:\/\/www.elasticmint.com\/wp-json\/wp\/v2\/posts\/460\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.elasticmint.com\/wp-json\/wp\/v2\/media\/482"}],"wp:attachment":[{"href":"https:\/\/www.elasticmint.com\/wp-json\/wp\/v2\/media?parent=460"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.elasticmint.com\/wp-json\/wp\/v2\/categories?post=460"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.elasticmint.com\/wp-json\/wp\/v2\/tags?post=460"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}